// Project 19 – Digital thermometer with terminal output

#include <avr/io.h>
#include <stdlib.h>
#include <stdio.h>
#include <math.h>
#include <util/delay.h>

#define USART_BAUDRATE 4800
#define UBRR_VALUE 12

void startADC()
// Set up the ADC
{
    ADMUX |= (1 << REFS0);                 // Use AVcc pin with ADC
    ADMUX |= (1 << MUX2) | (1 << MUX0);    // use ADC5 (pin 28)
    ADCSRA |= (1 << ADPS1) | (1 << ADPS0); // prescaler for 1MHz (/8)
    ADCSRA |= (1 << ADEN);                 // enable ADC
}

void USARTInit(void)
{
    // Set baud rate registers
    UBRR0H = (uint8_t)(UBRR_VALUE>>8);
    UBRR0L = (uint8_t)UBRR_VALUE;

    // Set data frame format to 8 data bits, no parity, 1 stop bit
    UCSR0C |= (1<<UCSZ01)|(1<<UCSZ00);

    // enable transmission and reception
    UCSR0B |= (1<<RXEN0)|(1<<TXEN0);
}

void USARTSendByte(unsigned char u8Data) // send a byte to USART
{
    //wait while previous byte is sent
    while(!(UCSR0A&(1<<UDRE0))){};
    // Transmit data
    UDR0 = u8Data;
}

void sendString(char myString[])
{
    uint8_t a = 0;
    while (myString[a])
    {
        USARTSendByte(myString[a]);
        a++;
    }
}

int main(void)
{
    float temperature;
    float voltage;
    char t[10] = ""; // will hold temperature for sending via USART
    char a[14] = "Temperature: ";  // make sure you have " instead of “
    char b[14] = " degrees C ";  // make sure you have " instead of “
    char newline[4] = "\r\n";

    DDRD = 0b00000000; // set PORTD to inputs
    startADC();
    USARTInit();
    while(1)
    {
        // get reading from TMP36 via ADC
        ADCSRA |= (1 << ADSC); // start ADC measurement
        while (ADCSRA & (1 << ADSC) ); // wait till conversion complete
        _delay_ms(10);

        // convert reading to temperature value (Celsius)
        voltage = (ADC * 5);
	voltage = voltage / 1024;
        temperature = ((voltage - 0.5) * 100);	

	// send temperature to PC via USART 
        sendString(a);
        dtostrf(temperature,6,2,t);	  
        sendString(t);
        sendString(b);
        sendString(newline);
        _delay_ms(1000);
    }
    return 0;             
}
